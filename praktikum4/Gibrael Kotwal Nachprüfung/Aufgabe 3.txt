

.file "aufgabe3"
.text 				// textsection fuer programmCode + Konstanten an 
.align 2 			// nachfolgende Anweisungen auf einer durch 4 teilbaren Adresse liegen // warum muss man 2 angeben? 2^2? 
				// untere 2 bis ind 0;  // why?

.global main 			// nimmt das Symbol main in die globale Symboltabelle auf


.main 
	push (lr)		// rücksprungadresse und evtl weitere Register sichern 
		
	ldr r0, adr_StringA	// lade adresse stringA in register r0

	bl(kopieren)
@	..
	bl(reduzieren)
@	..	
	bl (sortieren
@	..
	pop{pc}			// lade aus dem stack den pc

kopieren:
@lade string in register 

	ldr r1 = StringB 	// lade adresse stringB in r1
	mov r2, r1		// kopiere r1 in r2
	
kopier_loop:
	
	ldrb r3,[r0], #1 	// lade byte in r3 von adresse in r0 
				// lade adresse von 1byte weiter in r0
	strb r3,[r2], #1 	// speichere r3 in adresse von r2 
				// speichere 1 byte weiter in r2
	
	cmp r3, #0 		// vergleiche inhalt von 3 mit 0 
	
	bne kopier_loop		// kopiere das nächste zeichen wenn cmp nicht gleich ist und springe wieder zurück in die loop 
	
	bc lr 			// rücksprung zu adresse in Link Register

reduzieren:
@entfernt alle buchstaben, groß oder klein 

	mov r0,r1 		// kopiere r1 in r0
	mov r5, #0x41		// kopiert asci wert 41 in r5
	mov r6, #0x58 		// kopiert asci wert 58 in r6
	
	b loop_reduzieren_1 		// sprung zu loop 1

loop_reduzieren_1:		// prüft den jeweils nächsten character 

	ldrb r2, [r0,#1]!	// lade inhalt an adresse von r0 in r2 , inkrementiere memory um 1 byte und speichere diese adresse in r0
	
	cmp r2, #0		//vergleiche ob r2 = 0; end condtion 

	beq loop_reduzieren_2	// wenn gleich, springe zu groß_klein 

loop_reduzieren_2: 		// finde den zu entfernenden buchstaben 

	ldrb 	r2, [r0] 	// lade inhalt an adresse in r0 in r2
		
	


adr_StringA: .word StringA	//hilfsvariable um an Adressen aus anderen Segmenten zu kommen

adr_StringB: .word StringB

.lfe1:				// was macht das?

	.size	main,.Lfe1-main	//programmgroesse berechnen

//.data-Section fuer intialisierte Daten
	.data
//liste von Zeichen

StringA: 	.asciz "Dies ist eine Email-Adresse: Max_Mustermann@h-da.de !"

//.comm-Section fuer nicht initialisierte Daten
 	.comm StringB, 256 	// Speicherbereich fuer zu sortierende StringB
	.comm StringC, 256	// Speicherbereich fuer zu sortierende StringC

//EOF